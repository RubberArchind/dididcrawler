# Nixpacks configuration for Laravel (Coolify)
# Runs nginx + php-fpm + queue worker in a single container via supervisord

[phases.setup]
# Ensure required system packages are installed for build/runtime
aptPkgs = [
  "nginx",
  "supervisor",
  "php-cli",
  "php-fpm",
  "php-mysql",
  "php-bcmath",
  "php-gd",
  "php-mbstring",
  "php-xml",
  "php-curl",
  "composer",
  "nodejs",
  "npm"
]

[phases.build]
# Prepare supervisor directory and permissions; Nixpacks will handle composer/npm
cmds = [
  "mkdir -p /etc/supervisor/conf.d/",
  "cp /assets/worker-*.conf /etc/supervisor/conf.d/",
  "cp /assets/supervisord.conf /etc/supervisord.conf",
  "chmod +x /assets/start.sh",
  "mkdir -p /var/log /var/log/nginx /var/cache/nginx"
]

[start]
cmd = "/assets/start.sh"

[staticAssets]
"start.sh" = '''
#!/usr/bin/env bash
set -euo pipefail

PORT="${PORT:-80}"

echo "[start] Bootstrapping Laravel (Nixpacks) on port ${PORT}"

# Generate nginx config dynamically (self-contained, no external includes)
cat > /etc/nginx.conf <<'NGINX'
user www-data www-data;
worker_processes 2;
daemon off;

worker_rlimit_nofile 8192;

events {
  worker_connections  2048;
}

http {
  types {
    text/html                             html htm shtml;
    text/css                              css;
    text/xml                              xml;
    image/gif                             gif;
    image/jpeg                            jpeg jpg;
    application/javascript                js;
    application/atom+xml                  atom;
    application/rss+xml                   rss;

    text/mathml                           mml;
    text/plain                            txt;
    text/vnd.sun.j2me.app-descriptor      jad;
    text/vnd.wap.wml                      wml;
    text/x-component                      htc;

    image/png                             png;
    image/tiff                            tif tiff;
    image/vnd.wap.wbmp                    wbmp;
    image/x-icon                          ico;
    image/x-jng                           jng;
    image/x-ms-bmp                        bmp;
    image/svg+xml                         svg svgz;
    image/webp                            webp;

    application/font-woff                 woff;
    application/java-archive              jar war ear;
    application/json                      json;
    application/msword                    doc;
    application/pdf                       pdf;
    application/postscript                ps eps ai;
    application/rtf                       rtf;
    application/vnd.ms-excel              xls;
    application/vnd.ms-powerpoint         ppt;
    application/vnd.wap.wmlc              wmlc;
    application/vnd.google-earth.kml+xml  kml;
    application/vnd.google-earth.kmz      kmz;
    application/x-7z-compressed           7z;
    application/x-cocoa                   cco;
    application/x-java-archive-diff       jardiff;
    application/x-java-jnlp-file          jnlp;
    application/x-makeself                run;
    application/x-perl                    pl pm;
    application/x-pilot                   prc pdb;
    application/x-rar-compressed          rar;
    application/x-redhat-package-manager  rpm;
    application/x-sea                     sea;
    application/x-shockwave-flash         swf;
    application/x-stuffit                 sit;
    application/x-tcl                     tcl tk;
    application/x-x509-ca-cert            der pem crt;
    application/x-xpinstall               xpi;
    application/xhtml+xml                 xhtml;
    application/zip                       zip;
    application/octet-stream              bin exe dll;
    application/octet-stream              deb;
    application/octet-stream              dmg;
    application/octet-stream              eot;
    application/octet-stream              iso img;
    application/octet-stream              msi msp msm;

    audio/midi                            mid midi kar;
    audio/mpeg                            mp3;
    audio/ogg                             ogg;
    audio/x-m4a                           m4a;
    audio/x-realaudio                     ra;

    video/3gpp                            3gpp 3gp;
    video/mp2t                            ts;
    video/mp4                             mp4;
    video/mpeg                            mpeg mpg;
    video/quicktime                       mov;
    video/webm                            webm;
    video/x-flv                           flv;
    video/x-m4v                           m4v;
    video/x-mng                           mng;
    video/x-ms-asf                        asx asf;
    video/x-ms-wmv                        wmv;
    video/x-msvideo                       avi;
  }
  index      index.php index.html;

    default_type application/octet-stream;
    access_log /var/log/nginx-access.log;
    error_log  /var/log/nginx-error.log;
    sendfile   on;
    tcp_nopush on;

    server {
        listen ${PORT};
        listen [::]:${PORT};
        server_name _;
        root /app/public;
        client_max_body_size 35M;
        index index.php;
        charset utf-8;

        location / {
            try_files $uri $uri/ /index.php?$query_string;
        }

        location = /favicon.ico { access_log off; log_not_found off; }
        location = /robots.txt  { access_log off; log_not_found off; }

        error_page 404 /index.php;

    location ~ \.php$ {
      include         fastcgi_params;
      fastcgi_pass    127.0.0.1:9000;
      fastcgi_index   index.php;
      fastcgi_param   SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
      fastcgi_param   QUERY_STRING    $query_string;
      fastcgi_param   REQUEST_METHOD  $request_method;
      fastcgi_param   CONTENT_TYPE    $content_type;
      fastcgi_param   CONTENT_LENGTH  $content_length;
      fastcgi_param   SCRIPT_NAME     $fastcgi_script_name;
      fastcgi_param   REQUEST_URI     $request_uri;
      fastcgi_param   DOCUMENT_URI    $document_uri;
      fastcgi_param   DOCUMENT_ROOT   $realpath_root;
      fastcgi_param   SERVER_PROTOCOL $server_protocol;
      fastcgi_param   GATEWAY_INTERFACE CGI/1.1;
      fastcgi_param   SERVER_SOFTWARE  nginx/$nginx_version;
      fastcgi_param   REMOTE_ADDR      $remote_addr;
      fastcgi_param   REMOTE_PORT      $remote_port;
      fastcgi_param   SERVER_ADDR      $server_addr;
      fastcgi_param   SERVER_PORT      $server_port;
      fastcgi_param   SERVER_NAME      $server_name;
      fastcgi_param   HTTPS            $https if_not_empty;
    }

        location ~ /\. { deny all; }
    }
}
NGINX

# Replace literal ${PORT} in nginx.conf with actual value
sed -i "s|\\${PORT}|${PORT}|g" /etc/nginx.conf

# Basic permissions to avoid cache/storage issues
chmod -R 775 storage bootstrap/cache || true

# Wait for database if configured (using PHP+PDO so no mysql client needed)
if [[ "${DB_CONNECTION:-}" == "mysql" && -n "${DB_HOST:-}" ]]; then
  echo "[start] Waiting for MySQL at ${DB_HOST}:${DB_PORT:-3306}..."
  ATTEMPTS=30
  until php -r '
    $h=getenv("DB_HOST"); $P=getenv("DB_PORT")?:"3306"; $d=getenv("DB_DATABASE"); $u=getenv("DB_USERNAME"); $p=getenv("DB_PASSWORD");
    try { new PDO("mysql:host={$h};port={$P};dbname={$d}", $u, $p); exit(0);} catch (Throwable $e) { exit(1);} 
  ' ; do
    ATTEMPTS=$((ATTEMPTS-1))
    if [[ $ATTEMPTS -le 0 ]]; then
      echo "[start] Database not reachable, continuing..."
      break
    fi
    echo "[start] MySQL not ready yet; retrying... ($ATTEMPTS left)"
    sleep 2
  done
fi

# Generate app key if needed
if ! grep -q "^APP_KEY=" .env 2>/dev/null || [[ -z "${APP_KEY:-}" ]]; then
  echo "[start] Generating APP_KEY"
  php artisan key:generate --no-interaction || true
fi

# Run migrations (force in container)
echo "[start] Running migrations"
php artisan migrate --force --no-interaction || true

# Optional seeding
if [[ "${SEED_DATABASE:-false}" == "true" ]]; then
  echo "[start] Seeding database"
  php artisan db:seed --force --no-interaction || true
fi

# Cache config/routes/views
php artisan config:cache || true
php artisan route:cache || true
php artisan view:cache || true

# Start Supervisor (manages nginx, php-fpm, and Laravel worker)
echo "[start] Starting supervisord"
exec supervisord -c /etc/supervisord.conf -n
'''

"supervisord.conf" = '''
[unix_http_server]
file=/assets/supervisor.sock

[supervisord]
logfile=/var/log/supervisord.log
logfile_maxbytes=50MB
logfile_backups=5
loglevel=info
pidfile=/assets/supervisord.pid
nodaemon=false
silent=false
minfds=1024
minprocs=200

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///assets/supervisor.sock

[include]
files = /etc/supervisor/conf.d/*.conf
'''

"worker-nginx.conf" = '''
[program:worker-nginx]
process_name=%(program_name)s_%(process_num)02d
command=nginx -c /etc/nginx.conf
autostart=true
autorestart=true
stdout_logfile=/var/log/worker-nginx.log
stderr_logfile=/var/log/worker-nginx.log
'''

"worker-phpfpm.conf" = '''
[program:worker-phpfpm]
process_name=%(program_name)s_%(process_num)02d
command=/bin/bash -lc 'if command -v php-fpm >/dev/null 2>&1; then exec php-fpm -y /assets/php-fpm.conf -F; else exec $(compgen -c | grep -E "^php-fpm[0-9.]*$" | head -n1) -y /assets/php-fpm.conf -F; fi'
autostart=true
autorestart=true
stdout_logfile=/var/log/worker-phpfpm.log
stderr_logfile=/var/log/worker-phpfpm.log
'''

"worker-laravel.conf" = '''
[program:worker-laravel]
process_name=%(program_name)s_%(process_num)02d
command=bash -c 'exec php /app/artisan queue:work --sleep=3 --tries=3 --max-time=3600'
autostart=true
autorestart=true
stopasgroup=true
killasgroup=true
numprocs=2
startsecs=0
stopwaitsecs=3600
stdout_logfile=/var/log/worker-laravel.log
stderr_logfile=/var/log/worker-laravel.log
'''

"php-fpm.conf" = '''
[www]
listen = 127.0.0.1:9000
user = www-data
group = www-data
listen.owner = www-data
listen.group = www-data
pm = dynamic
pm.max_children = 20
pm.min_spare_servers = 2
pm.max_spare_servers = 10
pm.start_servers = 4
clear_env = no
php_admin_value[post_max_size] = 35M
php_admin_value[upload_max_filesize] = 30M
'''
